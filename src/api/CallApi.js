/**
 * fn
 * The open source serverless platform.
 *
 * OpenAPI spec version: 0.2.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CallWrapper', 'model/CallsWrapper', 'model/Error', 'model/LogWrapper'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CallWrapper'), require('../model/CallsWrapper'), require('../model/Error'), require('../model/LogWrapper'));
  } else {
    // Browser globals (root is window)
    if (!root.FnJs) {
      root.FnJs = {};
    }
    root.FnJs.CallApi = factory(root.FnJs.ApiClient, root.FnJs.CallWrapper, root.FnJs.CallsWrapper, root.FnJs.Error, root.FnJs.LogWrapper);
  }
}(this, function(ApiClient, CallWrapper, CallsWrapper, Error, LogWrapper) {
  'use strict';

  /**
   * Call service.
   * @module api/CallApi
   * @version 0.2.4
   */

  /**
   * Constructs a new CallApi. 
   * @alias module:api/CallApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get call information
     * Get call information
     * @param {String} app app name
     * @param {String} call Call ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CallWrapper} and HTTP response
     */
    this.appsAppCallsCallGetWithHttpInfo = function(app, call) {
      var postBody = null;

      // verify the required parameter 'app' is set
      if (app === undefined || app === null) {
        throw new Error("Missing the required parameter 'app' when calling appsAppCallsCallGet");
      }

      // verify the required parameter 'call' is set
      if (call === undefined || call === null) {
        throw new Error("Missing the required parameter 'call' when calling appsAppCallsCallGet");
      }


      var pathParams = {
        'app': app,
        'call': call
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CallWrapper;

      return this.apiClient.callApi(
        '/apps/{app}/calls/{call}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get call information
     * Get call information
     * @param {String} app app name
     * @param {String} call Call ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CallWrapper}
     */
    this.appsAppCallsCallGet = function(app, call) {
      return this.appsAppCallsCallGetWithHttpInfo(app, call)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get call logs
     * Get call logs
     * @param {String} app App Name
     * @param {String} call Call ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogWrapper} and HTTP response
     */
    this.appsAppCallsCallLogGetWithHttpInfo = function(app, call) {
      var postBody = null;

      // verify the required parameter 'app' is set
      if (app === undefined || app === null) {
        throw new Error("Missing the required parameter 'app' when calling appsAppCallsCallLogGet");
      }

      // verify the required parameter 'call' is set
      if (call === undefined || call === null) {
        throw new Error("Missing the required parameter 'call' when calling appsAppCallsCallLogGet");
      }


      var pathParams = {
        'app': app,
        'call': call
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogWrapper;

      return this.apiClient.callApi(
        '/apps/{app}/calls/{call}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get call logs
     * Get call logs
     * @param {String} app App Name
     * @param {String} call Call ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogWrapper}
     */
    this.appsAppCallsCallLogGet = function(app, call) {
      return this.appsAppCallsCallLogGetWithHttpInfo(app, call)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get app-bound calls.
     * Get app-bound calls can filter to route-bound calls, results returned in created_at, descending order (newest first).
     * @param {String} app App name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Route path to match, exact.
     * @param {String} opts.cursor Cursor from previous response.next_cursor to begin results after, if any.
     * @param {Number} opts.perPage Number of results to return, defaults to 30. Max of 100.
     * @param {Number} opts.fromTime Unix timestamp in seconds, of call.created_at to begin the results at, default 0.
     * @param {Number} opts.toTime Unix timestamp in seconds, of call.created_at to end the results at, defaults to latest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CallsWrapper} and HTTP response
     */
    this.appsAppCallsGetWithHttpInfo = function(app, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'app' is set
      if (app === undefined || app === null) {
        throw new Error("Missing the required parameter 'app' when calling appsAppCallsGet");
      }


      var pathParams = {
        'app': app
      };
      var queryParams = {
        'path': opts['path'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'from_time': opts['fromTime'],
        'to_time': opts['toTime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CallsWrapper;

      return this.apiClient.callApi(
        '/apps/{app}/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get app-bound calls.
     * Get app-bound calls can filter to route-bound calls, results returned in created_at, descending order (newest first).
     * @param {String} app App name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Route path to match, exact.
     * @param {String} opts.cursor Cursor from previous response.next_cursor to begin results after, if any.
     * @param {Number} opts.perPage Number of results to return, defaults to 30. Max of 100.
     * @param {Number} opts.fromTime Unix timestamp in seconds, of call.created_at to begin the results at, default 0.
     * @param {Number} opts.toTime Unix timestamp in seconds, of call.created_at to end the results at, defaults to latest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CallsWrapper}
     */
    this.appsAppCallsGet = function(app, opts) {
      return this.appsAppCallsGetWithHttpInfo(app, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
