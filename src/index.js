/**
 * fn
 * The open source serverless platform.
 *
 * OpenAPI spec version: 0.2.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/App', 'model/AppWrapper', 'model/AppsWrapper', 'model/Call', 'model/CallWrapper', 'model/CallsWrapper', 'model/Error', 'model/ErrorBody', 'model/Log', 'model/LogWrapper', 'model/Route', 'model/RouteWrapper', 'model/RoutesWrapper', 'model/Stat', 'model/StatMetrics', 'model/Version', 'api/AppsApi', 'api/CallApi', 'api/LogApi', 'api/RoutesApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/App'), require('./model/AppWrapper'), require('./model/AppsWrapper'), require('./model/Call'), require('./model/CallWrapper'), require('./model/CallsWrapper'), require('./model/Error'), require('./model/ErrorBody'), require('./model/Log'), require('./model/LogWrapper'), require('./model/Route'), require('./model/RouteWrapper'), require('./model/RoutesWrapper'), require('./model/Stat'), require('./model/StatMetrics'), require('./model/Version'), require('./api/AppsApi'), require('./api/CallApi'), require('./api/LogApi'), require('./api/RoutesApi'));
  }
}(function(ApiClient, App, AppWrapper, AppsWrapper, Call, CallWrapper, CallsWrapper, Error, ErrorBody, Log, LogWrapper, Route, RouteWrapper, RoutesWrapper, Stat, StatMetrics, Version, AppsApi, CallApi, LogApi, RoutesApi) {
  'use strict';

  /**
   * The_open_source_serverless_platform_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var FnJs = require('index'); // See note below*.
   * var xxxSvc = new FnJs.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new FnJs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new FnJs.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new FnJs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.2.4
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The App model constructor.
     * @property {module:model/App}
     */
    App: App,
    /**
     * The AppWrapper model constructor.
     * @property {module:model/AppWrapper}
     */
    AppWrapper: AppWrapper,
    /**
     * The AppsWrapper model constructor.
     * @property {module:model/AppsWrapper}
     */
    AppsWrapper: AppsWrapper,
    /**
     * The Call model constructor.
     * @property {module:model/Call}
     */
    Call: Call,
    /**
     * The CallWrapper model constructor.
     * @property {module:model/CallWrapper}
     */
    CallWrapper: CallWrapper,
    /**
     * The CallsWrapper model constructor.
     * @property {module:model/CallsWrapper}
     */
    CallsWrapper: CallsWrapper,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorBody model constructor.
     * @property {module:model/ErrorBody}
     */
    ErrorBody: ErrorBody,
    /**
     * The Log model constructor.
     * @property {module:model/Log}
     */
    Log: Log,
    /**
     * The LogWrapper model constructor.
     * @property {module:model/LogWrapper}
     */
    LogWrapper: LogWrapper,
    /**
     * The Route model constructor.
     * @property {module:model/Route}
     */
    Route: Route,
    /**
     * The RouteWrapper model constructor.
     * @property {module:model/RouteWrapper}
     */
    RouteWrapper: RouteWrapper,
    /**
     * The RoutesWrapper model constructor.
     * @property {module:model/RoutesWrapper}
     */
    RoutesWrapper: RoutesWrapper,
    /**
     * The Stat model constructor.
     * @property {module:model/Stat}
     */
    Stat: Stat,
    /**
     * The StatMetrics model constructor.
     * @property {module:model/StatMetrics}
     */
    StatMetrics: StatMetrics,
    /**
     * The Version model constructor.
     * @property {module:model/Version}
     */
    Version: Version,
    /**
     * The AppsApi service constructor.
     * @property {module:api/AppsApi}
     */
    AppsApi: AppsApi,
    /**
     * The CallApi service constructor.
     * @property {module:api/CallApi}
     */
    CallApi: CallApi,
    /**
     * The LogApi service constructor.
     * @property {module:api/LogApi}
     */
    LogApi: LogApi,
    /**
     * The RoutesApi service constructor.
     * @property {module:api/RoutesApi}
     */
    RoutesApi: RoutesApi
  };

  return exports;
}));
